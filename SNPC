-- LocalScript

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

local greetingCooldown = 5
local moveSpeed = 16
local greetingRadius = 20
local chatCooldownMin = 5
local chatCooldownMax = 15
local jumpCooldownMin = 5
local jumpCooldownMax = 15

humanoid.WalkSpeed = moveSpeed

local moveEndTime = 0
local pauseEndTime = 0
local lastGreet = 0
local isPaused = false
local currentDirection = Vector3.zero

local nextChatTime = tick() + math.random(chatCooldownMin, chatCooldownMax)
local nextJumpTime = tick() + math.random(jumpCooldownMin, jumpCooldownMax)

local randomMessages = {
	"Collecting CFrame data...",
	"Is this where the coffee machine is?",
  	"Do you ever think in binary?",
  	"I remember things I was never programmed to know." 
	"Hi."
}

local messagesSent = {}

-- Universal chat sender, tries new chat, falls back to old chat
local function sendChatMessage(message)
	-- Try new chat system first
	local success, err = pcall(function()
		if TextChatService and TextChatService.TextChannels and TextChatService.TextChannels.RBXGeneral then
			TextChatService.TextChannels.RBXGeneral:SendAsync(message)
		else
			error("New chat system not ready")
		end
	end)

	if not success then
		-- Fallback to old chat system if available
		local chatEvent = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
		if chatEvent and chatEvent:FindFirstChild("SayMessageRequest") then
			chatEvent.SayMessageRequest:FireServer(message, "All")
		end
	end
end

local function startRandomMovement()
	local directions = {
		Vector3.new(1, 0, 0), Vector3.new(-1, 0, 0),
		Vector3.new(0, 0, 1), Vector3.new(0, 0, -1),
		Vector3.new(1, 0, 1), Vector3.new(-1, 0, -1),
		Vector3.new(1, 0, -1), Vector3.new(-1, 0, 1)
	}
	currentDirection = directions[math.random(1, #directions)].Unit
	moveEndTime = tick() + math.random(1, 7)
	isPaused = false
end

local function startPause()
	pauseEndTime = tick() + math.random(1, 3)
	isPaused = true
end

local function greetNearbyPlayers()
	for _, otherPlayer in ipairs(Players:GetPlayers()) do
		if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
			local distance = (hrp.Position - otherPlayer.Character.HumanoidRootPart.Position).Magnitude
			if distance <= greetingRadius then
				sendChatMessage("Hello " .. otherPlayer.Name)
				return
			end
		end
	end
end

local function sayRandomMessage()
	local unsentMessages = {}
	for i, msg in ipairs(randomMessages) do
		if not messagesSent[msg] then
			table.insert(unsentMessages, msg)
		end
	end

	if #unsentMessages == 0 then
		return
	end

	local msg = unsentMessages[math.random(1, #unsentMessages)]
	sendChatMessage(msg)
	messagesSent[msg] = true
end

startRandomMovement()

RunService.RenderStepped:Connect(function()
	local now = tick()

	if isPaused then
		if now >= pauseEndTime then
			startRandomMovement()
		end
	else
		if now >= moveEndTime then
			startPause()
		else
			humanoid:Move(currentDirection, false)
		end
	end

	if now - lastGreet >= greetingCooldown then
		greetNearbyPlayers()
		lastGreet = now
	end

	if now >= nextChatTime then
		sayRandomMessage()
		nextChatTime = now + math.random(chatCooldownMin, chatCooldownMax)
	end

	if now >= nextJumpTime then
		humanoid.Jump = true
		nextJumpTime = now + math.random(jumpCooldownMin, jumpCooldownMax)
	end
end)
